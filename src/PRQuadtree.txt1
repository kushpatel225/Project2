import java.util.*;

/**
 * The PR Quadtree class is a spatial data structure used for organizing points
 * in a 2D space, dividing the space into four quadrants recursively.
 */
import java.util.*;

/**
 * The PR Quadtree class is a spatial data structure used for organizing points
 * in a 2D space, dividing the space into four quadrants recursively.
 */
public class PRQuadtree {

    private static final int MAX_POINTS = 3; // Maximum points per leaf node
    private static final int WORLD_SIZE = 1024; // Size of the world (1024x1024)

    private int totalNodesPrinted = 0; // To track the number of nodes printed

    // Base class for Quadtree nodes
    private abstract class Node {
        int x, y, size;

        Node(int x, int y, int size) {
            this.x = x;
            this.y = y;
            this.size = size;
        }


        abstract void dump(int level);
    }


    // Leaf node stores points
    private class LeafNode extends Node {
        List<Point> points;

        LeafNode(int x, int y, int size) {
            super(x, y, size);
            points = new ArrayList<>();
        }


        void dump(int level) {
            // Print all points in the leaf node
            if (!points.isEmpty()) {
                System.out.println("  ".repeat(level) + "Node at " + x + ", "
                    + y + ", " + size + ":");
                for (Point p : points) {
                    System.out.println("  ".repeat(level + 1) + "(" + p
                        .getName() + ", " + p.getX() + ", " + p.getY() + ")");
                }
                totalNodesPrinted++;
            }
        }
    }


    // Internal node stores references to children
    private class InternalNode extends Node {
        Node nw, ne, sw, se;

        InternalNode(int x, int y, int size) {
            super(x, y, size);
            nw = ne = sw = se = null;
        }


        void dump(int level) {
            System.out.println("  ".repeat(level) + "Node at " + x + ", " + y
                + ", " + size + ": Internal");
            totalNodesPrinted++;

            // Print child nodes (if any)
            printChildNode(nw, level + 1, x, y, size / 2); // NW
            printChildNode(ne, level + 1, x + size / 2, y, size / 2); // NE
            printChildNode(sw, level + 1, x, y + size / 2, size / 2); // SW
            printChildNode(se, level + 1, x + size / 2, y + size / 2, size
                / 2); // SE
        }


        private void printChildNode(
            Node child,
            int level,
            int childX,
            int childY,
            int childSize) {
            if (child != null) {
                child.dump(level);
            }
            else {
                System.out.println("  ".repeat(level) + "Node at " + childX
                    + ", " + childY + ", " + childSize + ": Empty");
                totalNodesPrinted++;
            }
        }
    }

    private Node root;

    public PRQuadtree() {
        root = new LeafNode(0, 0, WORLD_SIZE); // Initialize the root node
                                               // (world size)
    }


    /**
     * Inserts a point into the PR Quadtree.
     *
     * @param point
     *            The point to be inserted
     */
    public void insert(Point point) {
        insert(root, point);
    }


    private void insert(Node node, Point point) {
        if (node instanceof LeafNode) {
            LeafNode leaf = (LeafNode)node;
            if (leaf.points.size() < MAX_POINTS) {
                leaf.points.add(point);
            }
            else {
                // Split the leaf node into an internal node if it exceeds the
                // max points
                InternalNode internal = new InternalNode(node.x, node.y,
                    node.size / 2);
                splitLeafNode(leaf, internal);
                insert(internal, point);
            }
        }
        else if (node instanceof InternalNode) {
            InternalNode internal = (InternalNode)node;
            // Determine the correct quadrant for the point and insert it
            if (point.getX() < internal.x + internal.size / 2) {
                if (point.getY() < internal.y + internal.size / 2) {
                    insert(internal.nw, point);
                }
                else {
                    insert(internal.sw, point);
                }
            }
            else {
                if (point.getY() < internal.y + internal.size / 2) {
                    insert(internal.ne, point);
                }
                else {
                    insert(internal.se, point);
                }
            }
        }
    }


    private void splitLeafNode(LeafNode leaf, InternalNode internal) {
        for (Point p : leaf.points) {
            if (p.getX() < internal.x + internal.size / 2) {
                if (p.getY() < internal.y + internal.size / 2) {
                    internal.nw = new LeafNode(internal.x, internal.y,
                        internal.size / 2);
                    insert(internal.nw, p);
                }
                else {
                    internal.sw = new LeafNode(internal.x, internal.y
                        + internal.size / 2, internal.size / 2);
                    insert(internal.sw, p);
                }
            }
            else {
                if (p.getY() < internal.y + internal.size / 2) {
                    internal.ne = new LeafNode(internal.x + internal.size / 2,
                        internal.y, internal.size / 2);
                    insert(internal.ne, p);
                }
                else {
                    internal.se = new LeafNode(internal.x + internal.size / 2,
                        internal.y + internal.size / 2, internal.size / 2);
                    insert(internal.se, p);
                }
            }
        }
    }


    /**
     * Removes a point by its name.
     *
     * @param name
     *            The name of the point to remove.
     */
    public void remove(String name) {
        if (remove(root, name)) {
            System.out.println("Point removed: " + name);
        }
        else {
            System.out.println("Point not removed: " + name);
        }
    }


    private boolean remove(Node node, String name) {
        if (node instanceof LeafNode) {
            LeafNode leaf = (LeafNode)node;
            for (Iterator<Point> iterator = leaf.points.iterator(); iterator
                .hasNext();) {
                Point p = iterator.next();
                if (p.getName().equals(name)) {
                    iterator.remove();
                    return true;
                }
            }
        }
        else if (node instanceof InternalNode) {
            InternalNode internal = (InternalNode)node;
            if (remove(internal.nw, name) || remove(internal.ne, name)
                || remove(internal.sw, name) || remove(internal.se, name)) {
                return true;
            }
        }
        return false;
    }


    /**
     * Removes a point by its coordinates.
     *
     * @param x
     *            The x-coordinate of the point.
     * @param y
     *            The y-coordinate of the point.
     */
    public void remove(int x, int y) {
        if (x < 0 || y < 0 || x >= WORLD_SIZE || y >= WORLD_SIZE) {
            System.out.println("Point rejected: (" + x + ", " + y + ")");
            return;
        }

        if (remove(root, x, y)) {
            System.out.println("Point removed: (" + x + ", " + y + ")");
        }
        else {
            System.out.println("Point not found: (" + x + ", " + y + ")");
        }
    }


    private boolean remove(Node node, int x, int y) {
        if (node instanceof LeafNode) {
            LeafNode leaf = (LeafNode)node;
            for (Iterator<Point> iterator = leaf.points.iterator(); iterator
                .hasNext();) {
                Point p = iterator.next();
                if (p.getX() == x && p.getY() == y) {
                    iterator.remove();
                    return true;
                }
            }
        }
        else if (node instanceof InternalNode) {
            InternalNode internal = (InternalNode)node;
            if (remove(internal.nw, x, y) || remove(internal.ne, x, y)
                || remove(internal.sw, x, y) || remove(internal.se, x, y)) {
                return true;
            }
        }
        return false;
    }


    /**
     * Searches for points in a specified region.
     *
     * @param x
     *            The x-coordinate of the region's top-left corner
     * @param y
     *            The y-coordinate of the region's top-left corner
     * @param w
     *            The width of the region
     * @param h
     *            The height of the region
     * @return List of points within the region
     */
    public List<Point> regionSearch(int x, int y, int w, int h) {
        List<Point> result = new ArrayList<>();
        searchRegion(root, x, y, w, h, result);
        return result;
    }


    private void searchRegion(
        Node node,
        int x,
        int y,
        int w,
        int h,
        List<Point> result) {
        if (node instanceof LeafNode) {
            LeafNode leaf = (LeafNode)node;
            for (Point p : leaf.points) {
                if (isPointInRegion(p, x, y, w, h)) {
                    result.add(p);
                }
            }
        }
        else if (node instanceof InternalNode) {
            InternalNode internal = (InternalNode)node;
            if (intersects(internal.nw, x, y, w, h))
                searchRegion(internal.nw, x, y, w, h, result);
            if (intersects(internal.ne, x, y, w, h))
                searchRegion(internal.ne, x, y, w, h, result);
            if (intersects(internal.sw, x, y, w, h))
                searchRegion(internal.sw, x, y, w, h, result);
            if (intersects(internal.se, x, y, w, h))
                searchRegion(internal.se, x, y, w, h, result);
        }
    }


    private boolean isPointInRegion(Point p, int x, int y, int w, int h) {
        return p.getX() >= x && p.getX() <= x + w && p.getY() >= y && p
            .getY() <= y + h;
    }


    private boolean intersects(Node node, int x, int y, int w, int h) {
        if (node == null)
            return false;
        // Check if node intersects with the region
        return !(node.x + node.size < x || node.x > x + w || node.y
            + node.size < y || node.y > y + h);
    }


    /**
     * Finds duplicate points (points with the same coordinates).
     */
    public void findDuplicates() {
        Set<String> seenLocations = new HashSet<>();
        Set<String> duplicates = new HashSet<>();
        findDuplicatePoints(root, seenLocations, duplicates);

        if (!duplicates.isEmpty()) {
            System.out.println("Duplicate points:");
            for (String loc : duplicates) {
                System.out.println(loc);
            }
        }
        else {
            System.out.println("No duplicate points found.");
        }
    }


    private void findDuplicatePoints(
        Node node,
        Set<String> seenLocations,
        Set<String> duplicates) {
        if (node instanceof LeafNode) {
            LeafNode leaf = (LeafNode)node;
            for (Point p : leaf.points) {
                String location = "(" + p.getX() + ", " + p.getY() + ")";
                if (seenLocations.contains(location)) {
                    duplicates.add(location);
                }
                else {
                    seenLocations.add(location);
                }
            }
        }
        else if (node instanceof InternalNode) {
            InternalNode internal = (InternalNode)node;
            findDuplicatePoints(internal.nw, seenLocations, duplicates);
            findDuplicatePoints(internal.ne, seenLocations, duplicates);
            findDuplicatePoints(internal.sw, seenLocations, duplicates);
            findDuplicatePoints(internal.se, seenLocations, duplicates);
        }
    }


    /**
     * Searches for points by name.
     */
    public void search(String name) {
        List<Point> result = searchByName(root, name);
        if (result.isEmpty()) {
            System.out.println("Point not found: " + name);
        }
        else {
            for (Point point : result) {
                System.out.println("Found (" + point.getName() + ", " + point
                    .getX() + ", " + point.getY() + ")");
            }
        }
    }


    private List<Point> searchByName(Node node, String name) {
        List<Point> result = new ArrayList<>();
        if (node instanceof LeafNode) {
            LeafNode leaf = (LeafNode)node;
            for (Point p : leaf.points) {
                if (p.getName().equals(name)) {
                    result.add(p);
                }
            }
        }
        else if (node instanceof InternalNode) {
            InternalNode internal = (InternalNode)node;
            result.addAll(searchByName(internal.nw, name));
            result.addAll(searchByName(internal.ne, name));
            result.addAll(searchByName(internal.sw, name));
            result.addAll(searchByName(internal.se, name));
        }
        return result;
    }


    /**
     * Dumps the entire PR Quadtree in preorder traversal.
     */
    public void dump() {
        System.out.println("QuadTree dump:");
        dumpTree(root, 0);
        System.out.println(totalNodesPrinted + " quadtree nodes printed");
    }


    private void dumpTree(Node node, int level) {
        if (node == null)
            return;
        node.dump(level);
    }
}
