import java.util.ArrayList;
import java.util.List;

public class SkipList<K extends Comparable<K>, E> {
    private class Node {
        KVPair<K, E> kvPair; // Store KVPair as the item
        List<Node> forward; // Use a list instead of an array for forward
                            // pointers

        Node(KVPair<K, E> kvPair, int level) {
            this.kvPair = kvPair;
            this.forward = new ArrayList<>(level + 1); // Initialize list with
                                                       // enough capacity
            for (int i = 0; i <= level; i++) {
                forward.add(null); // Initialize each forward pointer as null
            }
        }
    }

    private static final double P = 0.5;
    private Node head;
    private int level;
    private int size;

    public SkipList() {
        head = new Node(null, 0); // Dummy head node
        level = 0;
        size = 0;
    }


    public void insert(K key, E value) {
        KVPair<K, E> kvPair = new KVPair<>(key, value);

        List<Node> update = new ArrayList<>(level + 1);
        Node current = head;
        for (int i = level; i >= 0; i--) {
            while (current.forward.get(i) != null && current.forward.get(
                i).kvPair.key().compareTo(key) < 0) {
                current = current.forward.get(i);
            }
            update.add(current);
        }

        int newLevel = randomLevel();
        if (newLevel > level) {
            for (int i = level + 1; i <= newLevel; i++) {
                update.add(null); // Adding nulls for new levels
            }
            level = newLevel;
        }

        Node newNode = new Node(kvPair, newLevel);
        for (int i = 0; i <= newLevel; i++) {
            newNode.forward.set(i, update.get(i).forward.get(i)); // Set forward
                                                                  // pointer
            update.get(i).forward.set(i, newNode); // Update forward pointer to
                                                   // new node
        }
        size++;
    }


    public E search(K key) {
        Node current = head;
        for (int i = level; i >= 0; i--) {
            while (current.forward.get(i) != null && current.forward.get(
                i).kvPair.key().compareTo(key) < 0) {
                current = current.forward.get(i);
            }
        }
        current = current.forward.get(0);
        if (current != null && current.kvPair.key().equals(key)) {
            return current.kvPair.value(); // Return the associated value
        }
        return null; // If not found
    }


    public void remove(K key) {
        List<Node> update = new ArrayList<>(level + 1);
        Node current = head;
        for (int i = level; i >= 0; i--) {
            while (current.forward.get(i) != null && current.forward.get(
                i).kvPair.key().compareTo(key) < 0) {
                current = current.forward.get(i);
            }
            update.add(current);
        }
        current = current.forward.get(0);
        if (current != null && current.kvPair.key().equals(key)) {
            for (int i = 0; i <= level; i++) {
                if (update.get(i).forward.get(i) != current) {
                    break;
                }
                update.get(i).forward.set(i, current.forward.get(i));
            }
            size--;
            while (level > 0 && head.forward.get(level) == null) {
                level--;
            }
        }
    }


    private int randomLevel() {
        int lvl = 0;
        while (Math.random() < P && lvl < 16) {
            lvl++;
        }
        return lvl;
    }


    public void dump() {
        Node current = head.forward.get(0);
        while (current != null) {
            System.out.println(current.kvPair); // Print KVPair
            current = current.forward.get(0);
        }
    }
}
